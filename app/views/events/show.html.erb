<% if @event.logo_path? %>
  <%= image_tag @event.logo_path  %>
<%end%>
<h1><%=h @event.name %></h1>

<p>
  <b>Promoter:</b> <%=link_to h( @event.promoter), @event.website, :target=>"new" %>
</p>

<p>
  <b>Date:</b> <%=h @event.start_date %>
</p>

<% if @event.is_series %>
  <p>
    <b>End date:</b> <%=h @event.end_date %>
  </p>
<%end %>

<p>
  <b>Venue Location:</b> <%=h @event.venue_location.upcase %>
  <%=h @event.city.capitalize %>, <%=h @event.state %>
</p>

<p>
  <b>Event Type:</b> <%=h @event.event_type %>
</p>
<p>
  <%=h @event.notes %>
</p>
<% if @event.event_comments.size > 0 %>
<%= link_to_function "view comments", "$('comments').show();$('h_comments').show();$('v_comments').hide()",:id=>"v_comments" %>
<%= link_to_function "hide comments", "$('comments').hide();$('v_comments').show();$('h_comments').hide()",:id=>"h_comments" ,:style=>"display:none"%>
<%end%>
<%  unless current_user_logged_in?  %>
  | <%= link_to "log in to add comment", login_path %>
<%end%>
<p>
<div id="comments" style="display:none">
  <%= render 'comments' %>
</div>
</p>

<% if current_user_logged_in? %>
  <p>
    <% form_remote_for(@comment,:url=>{:action=>:create_comment},:success=>"$('event_comment_comment').value=''")  do |f| -%>
      <% #f.fields_for :event_comments do |ff| %>
      <%= f.hidden_field :event_id,:value=>@event.id %>
      <%= f.text_area :comment, :rows=>2 %><br/>
    <%#end%>
      <%= f.submit "comment" %>
    <%end%>
  </p>
<%end%>

<table width="100%">
  <tr>
    <td>
      <%= label_tag "Directions From" %><%= text_field_tag 'from' %> </td>
    <td><%= button_to_function "Go","setDirections($('from').value,'#{@event.address}','en_US')" %>
    </td>
  </tr>
</table>

<div id="map"></div>
<div id="route"></div>


<script src="http://maps.google.com/maps?file=api&v=2&key=<%= google_map_api_key  %>"
type="text/javascript"></script>

<script type="text/javascript">
  // helper function to create markers
  function createMarker(point,html) {
    var marker = new GMarker(point);
    GEvent.addListener(marker, "click", function() {
      marker.openInfoWindowHtml(html);
    });
    return marker;
  }

  // this is called when the page loads.
  // it initializes the map, and creates each marker
  var gdir;
  function initialize() {


    if (GBrowserIsCompatible()) {

      var map = new GMap(document.getElementById("map"));
      map.addControl(new GSmallMapControl());
      map.centerAndZoom(new GPoint(<%= "#{@event.lng},#{@event.lat}" %>), 9);
      var point = new GPoint(<%=@event[:lng]%>,<%=@event[:lat]%>);
      var marker = createMarker(point, '<%=marker(@event)%>')
      map.addOverlay(marker);

      directionsPanel = document.getElementById("route");
      gdir = new GDirections(map, directionsPanel);
      GEvent.addListener(gdir, "load", onGDirectionsLoad);
      GEvent.addListener(gdir, "error", handleErrors);
    }


  }
  function setDirections(fromAddress, toAddress,locale) {
    gdir.load("from: " + fromAddress + " to: " + toAddress,{ "locale": locale });
  }

  function handleErrors(){
    if (gdir.getStatus().code == G_GEO_UNKNOWN_ADDRESS)
      alert("No corresponding geographic location could be found for one of the specified addresses. This may be due to the fact that the address is relatively new, or it may be incorrect.\nError code: " + gdir.getStatus().code);
    else if (gdir.getStatus().code == G_GEO_SERVER_ERROR)
      alert("A geocoding or directions request could not be successfully processed, yet the exact reason for the failure is not known.\n Error code: " + gdir.getStatus().code);

    else if (gdir.getStatus().code == G_GEO_MISSING_QUERY)
      alert("The HTTP q parameter was either missing or had no value. For geocoder requests, this means that an empty address was specified as input. For directions requests, this means that no query was specified in the input.\n Error code: " + gdir.getStatus().code);

    //   else if (gdir.getStatus().code == G_UNAVAILABLE_ADDRESS)  <--- Doc bug... this is either not defined, or Doc is wrong
    //     alert("The geocode for the given address or the route for the given directions query cannot be returned due to legal or contractual reasons.\n Error code: " + gdir.getStatus().code);

    else if (gdir.getStatus().code == G_GEO_BAD_KEY)
      alert("The given key is either invalid or does not match the domain for which it was given. \n Error code: " + gdir.getStatus().code);

    else if (gdir.getStatus().code == G_GEO_BAD_REQUEST)
      alert("A directions request could not be successfully parsed.\n Error code: " + gdir.getStatus().code);

    else alert("An unknown error occurred.");

  }

  function onGDirectionsLoad(){
    // Use this function to access information about the latest load()
    // results.

    // e.g.
    //document.getElementById("getStatus").innerHTML = gdir.getStatus().code;
    // and yada yada yada...
  }




</script>

<script type="text/javascript">
  document.observe("dom:loaded", function() {
    // initially hide all containers for tab content
    initialize()
  });
  document.observe("dom:unloaded", function() {
    // initially hide all containers for tab content
    GUnload()
  });


</script>